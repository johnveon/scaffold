<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>cn.huanqiu</groupId>
    <artifactId>scaffold</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  	<relativePath>../scaffold-parent/pom.xml</relativePath>
  </parent>
  <groupId>cn.huanqiu</groupId>
  <artifactId>scaffold-cms</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  <name>scaffold-cms</name>
  <description>scaffold-cms</description>
  
	<dependencies>
		<dependency>
			<groupId>${project.parent.groupId}</groupId>
			<artifactId>${project.parent.artifactId}-interface</artifactId>
			<version>${project.parent.version}</version>
		</dependency>
		<dependency>
			<groupId>${project.parent.groupId}</groupId>
			<artifactId>${project.parent.artifactId}-common</artifactId>
			<version>${project.parent.version}</version>
		</dependency>
		<dependency>
			<groupId>${project.parent.groupId}</groupId>
			<artifactId>${project.parent.artifactId}-service</artifactId>
			<version>${project.parent.version}</version>
		</dependency>
		<!-- 
		<dependency>
			<groupId>${project.parent.groupId}</groupId>
			<artifactId>${project.parent.artifactId}-dao</artifactId>
			<version>${project.parent.version}</version>
		</dependency>
		-->
	</dependencies>

	<build>
		<!-- we dont want the version to be part of the generated war file name -->
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
    			<!-- mvn sysdeo-tomcat:generate -->
			    <groupId>org.codehaus.mojo</groupId>
			    <artifactId>sysdeo-tomcat-maven-plugin</artifactId>
			    <version>1.1</version>
			</plugin>
			
            <plugin>  
                <groupId>org.codehaus.mojo</groupId>  
                <artifactId>tomcat-maven-plugin</artifactId>  
                <version>1.1</version>  
  
                <configuration>  
					<url>${tomcat.url}</url>
                    <server>tomcat</server>  
                    <username>${tomcat.username}</username>  
                    <password>${tomcat.password}</password>  
                </configuration>  
            </plugin> 

			<!--
				maven-compiler-plugin是用来编译Java代码的插件。
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>${jdk.version}</source>
					<target>${jdk.version}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
					<showWarnings>true</showWarnings>
					<!-- 使用maven打包时,把WEB-INF\lib目录下的jar包也打包进去 -->
					<compilerArguments>
						<extdirs>src\main\webapp\WEB-INF\lib</extdirs>
					</compilerArguments>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.codehaus.plexus</groupId>
						<artifactId>plexus-compiler-javac</artifactId>
						<version>2.3</version>
					</dependency>
				</dependencies>
			</plugin>

			<!--
				maven-resources-plugin用来处理资源文件。
				默认的主资源文件目录是src/main/resources，
				很多用户会需要添加额外的资源文件目录，这个时候就可以通过配置maven-resources-plugin来实现。
				此外，资源文件过滤也是Maven的一大特性，你可以在资源文件中使用${propertyName}形式的Maven属性，
				然后配置maven-resources-plugin开启对资源文件的过滤，
				之后就可以针对不同环境通过命令行或者Profile传入属性的值，以实现更为灵活的构建。
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<encoding>${project.build.sourceEncoding}</encoding>
					<useBuildFilters>true</useBuildFilters>
					<supportMultiLineFiltering>true</supportMultiLineFiltering>
				</configuration>
			</plugin>

			<!--
				Maven 2/3中用于执行测试的插件不是maven-test-plugin，而是maven-surefire-plugin。
				其实大部分时间内，只要你的测试类遵循通用的命令约定（以Test结尾、以TestCase结尾、或者以Test开头），就几乎不用知晓该插件的存在。
				然而在当你想要跳过测试、排除某些测试类、或者使用一些TestNG特性的时候，了解maven-surefire-plugin的一些配置选项就很有用了。
				例如 mvn test -Dtest=FooTest 这样一条命令的效果是仅运行FooTest测试类，
				这是通过控制maven-surefire-plugin的test参数实现的。
				如果不添加该插件，运行mvn test，命令行中文莫名其妙乱码。
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.16</version>
				<configuration>
					<parallel>methods</parallel>
					<threadCount>10</threadCount>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<!-- 激活spring profile -->
					<webResources>
						<resource>
							<filtering>true</filtering>
							<directory>src/main/webapp</directory>
							<includes>
								<include>**/web.xml</include>
							</includes>
						</resource>
					</webResources>
					<warSourceDirectory>src/main/webapp</warSourceDirectory>
					<webXml>src/main/webapp/WEB-INF/web.xml</webXml>
				</configuration>
			</plugin>

			<!-- 构建项目站点报告插件 ,详细可参考http://my.oschina.net/linuxred/blog/24458 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>3.3</version>
				<configuration>
					<!-- 配置站点国际化 -->
					<locales>zh_CN</locales>
					<!-- 输出编码 -->
					<outputEncoding>${project.build.sourceEncoding}</outputEncoding>
				</configuration>
			</plugin>

			<!-- YUI Compressor Maven压缩插件 -->
			<!--
				<plugin>
				<groupId>net.alchim31.maven</groupId>
				<artifactId>yuicompressor-maven-plugin</artifactId>
				<version>1.3.3</version>
				</plugin>
			-->
			<!--
				可用Goal查看地址：http://tomcat.apache.org/maven-plugin-2.0/tomcat7-maven-plugin/plugin-info.html
				常用的Goal命令 描述
				tomcat7:deploy 部署一个web war包
				tomcat7:redeploy 重新部署一个web war包
				tomcat7:undeploy 删除部署的一个war包
				tomcat7:reload 重新加载web war包
				tomcat7:shutdown 停止tomcat
				tomcat7:exec-war 运行一个war
				tomcat7:run 启动嵌入式tomcat ，并运行当前项目
				tomcat7:help Display help information on tomcat7-maven-plugin.
				Call mvn tomcat7:help -Ddetail=true -Dgoal=<goal-name> to display parameter
				details.
			-->
<!-- 			<plugin> -->
<!-- 				<groupId>org.apache.tomcat.maven</groupId> -->
<!-- 				<artifactId>tomcat7-maven-plugin</artifactId> -->
<!-- 				<version>2.2</version> -->
<!-- 				<configuration> -->
<!-- 					http port -->
<!-- 					<port>80</port> -->
<!-- 					application path always starts with / -->
<!-- 					<path>/</path> -->
<!-- 				</configuration> -->
<!-- 			</plugin> -->
		</plugins>
		
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
				<includes>
					<include>spring.xml</include>
				</includes>
			</resource>
			<resource>  
        		<directory>src/main/resources</directory>  
        		<filtering>true</filtering>  
        		<excludes>  
					<exclude>spring.xml</exclude> 
        		</excludes>  
    		</resource>  
		</resources>
		
	</build>
	
	<profiles>
		<profile>
			<id>integration-test</id>
			<activation>
				<property>
					<name>!skipTests</name>
				</property>
			</activation>
			<build>
				<plugins>
					<!-- <plugin> <groupId>org.codehaus.cargo</groupId> <artifactId>cargo-maven2-plugin</artifactId> 
						<version>${cargo.version}</version> <configuration> <wait>${cargo.wait}</wait> 
						<container> <containerId>${cargo.container}</containerId> <home>${cargo.container.home}</home> 
						<zipUrlInstaller> <url>${cargo.container.url}</url> <extractDir>${installDir}</extractDir> 
						</zipUrlInstaller> </container> <configuration> <home>${project.build.directory}/${cargo.container}/container</home> 
						<properties> <cargo.hostname>${cargo.host}</cargo.hostname> <cargo.servlet.port>${cargo.port}</cargo.servlet.port> 
						<cargo.tomcat.ajp.port>8123</cargo.tomcat.ajp.port> </properties> </configuration> 
						</configuration> <executions> <execution> <id>start-container</id> <phase>pre-integration-test</phase> 
						<goals> <goal>start</goal> </goals> </execution> <execution> <id>stop-container</id> 
						<phase>post-integration-test</phase> <goals> <goal>stop</goal> </goals> </execution> 
						</executions> </plugin> <plugin> <groupId>org.codehaus.mojo</groupId> <artifactId>webtest-maven-plugin</artifactId> 
						<version>1.0.0</version> <executions> <execution> <id>webtest-test</id> <phase>integration-test</phase> 
						<goals> <goal>test</goal> </goals> </execution> <execution> <id>webtest-verify</id> 
						<phase>verify</phase> <goals> <goal>verify-result</goal> </goals> </execution> 
						<execution> <id>webtest-report-html</id> <phase>post-integration-test</phase> 
						<goals> <goal>report</goal> </goals> </execution> </executions> <configuration> 
						<host>${cargo.host}</host> <port>${cargo.port}</port> <sourcedirectory>src/test/resources</sourcedirectory> 
						<sourcefile>web-tests.xml</sourcefile> <target>${webtest.target}</target> 
						<basepath>${project.build.finalName}</basepath> <resultpath>target/webtest/webtest-results</resultpath> 
						<haltonfailure>false</haltonfailure> <haltonerror>false</haltonerror> <loglevel>fatal</loglevel> 
						</configuration> </plugin> -->
				</plugins>
			</build>
		</profile>
		<!-- ================= Production Settings Profile ================= -->
		<!-- Use "-P prod" when you want to use the settings in this profile -->
		<!-- =============================================================== -->
		<profile>
			<id>prod</id>
			<build>
				<plugins>
					<!-- Override location of data file for DbUnit to load (doesn't have 
						negative keys) -->
<!-- 					<plugin> -->
<!-- 						<groupId>org.codehaus.mojo</groupId> -->
<!-- 						<artifactId>dbunit-maven-plugin</artifactId> -->
<!-- 						<configuration> -->
<!-- 							<src>src/main/resources/default-data.xml</src> -->
<!-- 						</configuration> -->
<!-- 					</plugin> -->
				</plugins>
			</build>
		</profile>
		
	</profiles>	
</project>