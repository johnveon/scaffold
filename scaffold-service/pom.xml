<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>cn.huanqiu</groupId>
    <artifactId>scaffold</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  	<relativePath>../scaffold-parent/pom.xml</relativePath>
  </parent>
  <groupId>cn.huanqiu</groupId>
  <artifactId>scaffold-service</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>scaffold-service</name>
  <description>scaffold-service</description>
  
	
	<dependencies>
		<dependency>
			<groupId>${project.parent.groupId}</groupId>
			<artifactId>${project.parent.artifactId}-interface</artifactId>
			<version>${project.parent.version}</version>
		</dependency>
		<dependency>
			<groupId>${project.parent.groupId}</groupId>
			<artifactId>${project.parent.artifactId}-common</artifactId>
			<version>${project.parent.version}</version>
		</dependency>
		<!-- 
		<dependency>
			<groupId>${project.parent.groupId}</groupId>
			<artifactId>${project.parent.artifactId}-dao</artifactId>
			<version>${project.parent.version}</version>
		</dependency>
		 -->
	</dependencies>

	<build>
		<!-- we dont want the version to be part of the generated war file name -->
		<finalName>${project.artifactId}</finalName>
		<plugins>

			<!--
				maven-compiler-plugin是用来编译Java代码的插件。
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>${jdk.version}</source>
					<target>${jdk.version}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
					<showWarnings>true</showWarnings>
					<!-- 使用maven打包时,把WEB-INF\lib目录下的jar包也打包进去 -->
					<compilerArguments>
						<extdirs>src\main\webapp\WEB-INF\lib</extdirs>
					</compilerArguments>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.codehaus.plexus</groupId>
						<artifactId>plexus-compiler-javac</artifactId>
						<version>2.3</version>
					</dependency>
				</dependencies>
			</plugin>

			<!--
				maven-resources-plugin用来处理资源文件。
				默认的主资源文件目录是src/main/resources，
				很多用户会需要添加额外的资源文件目录，这个时候就可以通过配置maven-resources-plugin来实现。
				此外，资源文件过滤也是Maven的一大特性，你可以在资源文件中使用${propertyName}形式的Maven属性，
				然后配置maven-resources-plugin开启对资源文件的过滤，
				之后就可以针对不同环境通过命令行或者Profile传入属性的值，以实现更为灵活的构建。
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<encoding>${project.build.sourceEncoding}</encoding>
					<useBuildFilters>true</useBuildFilters>
					<supportMultiLineFiltering>true</supportMultiLineFiltering>
				</configuration>
			</plugin>

			<!--
				Maven 2/3中用于执行测试的插件不是maven-test-plugin，而是maven-surefire-plugin。
				其实大部分时间内，只要你的测试类遵循通用的命令约定（以Test结尾、以TestCase结尾、或者以Test开头），就几乎不用知晓该插件的存在。
				然而在当你想要跳过测试、排除某些测试类、或者使用一些TestNG特性的时候，了解maven-surefire-plugin的一些配置选项就很有用了。
				例如 mvn test -Dtest=FooTest 这样一条命令的效果是仅运行FooTest测试类，
				这是通过控制maven-surefire-plugin的test参数实现的。
				如果不添加该插件，运行mvn test，命令行中文莫名其妙乱码。
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.16</version>
				<configuration>
					<parallel>methods</parallel>
					<threadCount>10</threadCount>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<!-- 激活spring profile -->
					<webResources>
						<resource>
							<filtering>true</filtering>
							<directory>src/main/webapp</directory>
							<includes>
								<include>**/web.xml</include>
							</includes>
						</resource>
					</webResources>
					<warSourceDirectory>src/main/webapp</warSourceDirectory>
					<webXml>src/main/webapp/WEB-INF/web.xml</webXml>
				</configuration>
			</plugin>

			<!-- 构建项目站点报告插件 ,详细可参考http://my.oschina.net/linuxred/blog/24458 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>3.3</version>
				<configuration>
					<!-- 配置站点国际化 -->
					<locales>zh_CN</locales>
					<!-- 输出编码 -->
					<outputEncoding>${project.build.sourceEncoding}</outputEncoding>
				</configuration>
			</plugin>

			<!-- YUI Compressor Maven压缩插件 -->
			<!--
				<plugin>
				<groupId>net.alchim31.maven</groupId>
				<artifactId>yuicompressor-maven-plugin</artifactId>
				<version>1.3.3</version>
				</plugin>
			-->
			<!--
				可用Goal查看地址：http://tomcat.apache.org/maven-plugin-2.0/tomcat7-maven-plugin/plugin-info.html
				常用的Goal命令 描述
				tomcat7:deploy 部署一个web war包
				tomcat7:redeploy 重新部署一个web war包
				tomcat7:undeploy 删除部署的一个war包
				tomcat7:reload 重新加载web war包
				tomcat7:shutdown 停止tomcat
				tomcat7:exec-war 运行一个war
				tomcat7:run 启动嵌入式tomcat ，并运行当前项目
				tomcat7:help Display help information on tomcat7-maven-plugin.
				Call mvn tomcat7:help -Ddetail=true -Dgoal=<goal-name> to display parameter
				details.
			-->
			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<!-- http port -->
					<port>80</port>
					<!-- application path always starts with / -->
					<path>/</path>
				</configuration>
			</plugin>
		</plugins>
		<!-- 打包包含sqlmap -->
		<resources>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>false</filtering>
            </resource>
        </resources>
	</build>
</project>